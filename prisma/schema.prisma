generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model business {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?          @db.VarChar(255)
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  user_id        String           @db.Uuid
  tenant_id      String           @db.VarChar(255)
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  business_owner business_owner[]
  product        product[]
  shop_manager   shop_manager[]
}

model business_owner {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String   @db.Uuid
  business_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id                               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  inviter_id                       String   @db.Uuid
  invitee_id                       String   @db.Uuid
  status                           String   @db.VarChar(255)
  created_at                       DateTime @default(now()) @db.Timestamp(6)
  updated_at                       DateTime @default(now()) @db.Timestamp(6)
  user_invitation_invitee_idTouser user     @relation("invitation_invitee_idTouser", fields: [invitee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invitation_inviter_idTouser user     @relation("invitation_inviter_idTouser", fields: [inviter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model product {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.VarChar(255)
  price       Int
  stock       Int
  business_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model shop_manager {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String   @db.Uuid
  business_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  business    business @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                     String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                  String           @unique @db.VarChar(255)
  firstName                              String?          @db.VarChar(255)
  lastName                               String?          @db.VarChar(255)
  roq_user_id                            String           @db.VarChar(255)
  tenant_id                              String           @db.VarChar(255)
  created_at                             DateTime         @default(now()) @db.Timestamp(6)
  updated_at                             DateTime         @default(now()) @db.Timestamp(6)
  business                               business[]
  business_owner                         business_owner[]
  invitation_invitation_invitee_idTouser invitation[]     @relation("invitation_invitee_idTouser")
  invitation_invitation_inviter_idTouser invitation[]     @relation("invitation_inviter_idTouser")
  shop_manager                           shop_manager[]
}
